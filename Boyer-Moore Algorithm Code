def boyer_moore_search(text, pattern):
    # Length of pattern and text
    m = len(pattern)
    n = len(text)

    # Create the bad character list
    bad_char = [-1] * 256

    # Fill the bad character list by calling the preprocessing function
    for i in range(m):
        bad_char[ord(pattern[i])] = i

    # Start from the beginning of the text
    s = 0
    pattern_found = False
    while s <= n - m:
        j = m - 1

        # Decrease index j of pattern while characters are matching
        while j >= 0 and pattern[j] == text[s + j]:
            j -= 1

        # If the pattern is present at the current shift, then index j will become -1
        if j < 0:
            print("Pattern found at index:", s)
            pattern_found = True

            # Shift the pattern so that the next character in text aligns with the last occurrence of it in the pattern
            s += (m - bad_char[ord(text[s + m])] if s + m < n else 1)
        else:
            # Shift the pattern so that the bad character in text aligns with the last occurrence of it in the pattern
            s += max(1, j - bad_char[ord(text[s + j])])

    if not pattern_found:
        print("Pattern not found")

# Get input from user
text = input("Enter the text: ")
pattern = input("Enter the pattern: ")

# Call the search function
boyer_moore_search(text, pattern)

